---
description: 
globs:
alwaysApply: false
---
# Call an API Element Guide

## What is Call an API?
Call an API allows you to trigger HTTP requests to external systems (outsourced tools, vendors, CRM, backend services) when users arrive at the element in a journey.  
Use cases:
- Send real-time data to Salesforce, SMS/Email vendors, or custom backends  
- Trigger promotions or account updates based on user actions  
- Upsert or export data via UCD APIs (e.g., UCD Upsert, UCD Raw Data Export)  

>**Note:** This is **not** a bulk export tool. For large data exports, use the UCD Raw Data Export API.

## How Call an API Works
1. **Fetch user attributes** from Rosie (production only).  
2. **Send request** via API Gateway → SQS → Lambda.  
3. **Log** success/failure to Kinesis.  
4. **Optionally store** compressed response in DynamoDB (`call_an_api_responses`) if Response Management is enabled.  
5. **Proceed** user to next element regardless of outcome.  

# Defining and Managing Endpoints

To use an endpoint in a Call an API element, define it first in **API Preferences** under **Architect settings**.  
If you plan to use existing endpoints, no need to visit this page.

> Only administrators and editors with PII access can create, edit, or delete endpoints.

---

### Creating Endpoints
- Click **Create Endpoint** in API Preferences from Architect Settings.  
- Enter:
  - **Name:** Descriptive title shown in Call an API dropdown.  
  - **Endpoint URL:** Base URL (no dynamic content here).  
  - **Headers:** Key-value pairs; mark sensitive values to mask them.  
- Click **Save** to add the endpoint.
#### Editing Endpoints
- Update **Name**, **URL**, or **Headers** anytime.  
- Changes apply automatically to all journeys/templates using this endpoint.  
- Active journeys stay active. Useful for token updates.
#### Deleting Endpoints
- Click delete icon next to an endpoint.  
- See which journeys/templates use it.  
- Deleting sets all related running journeys to **passive**.
#### Viewing Endpoint Details
- Click the **info (i)** icon to view URL and headers.  
- Sensitive info is masked. Visible to all roles.

### Retry & Throttling
- **Throttling:** limit requests/sec per endpoint (5–5000, multiples of 5)  
- **Throttle retries:** up to 10 attempts at random 3–7 min intervals  
- **Timeout retries:** for 503/504 errors, up to 3 attempts at 3–7 min intervals  

### Response Management
- Toggle **Store API Response** to save compressed result  
- Define Variables (name, path, type) for downstream use  

---
## Call an API Structure

### 1: Add Call an API Element
-In the Canvas, click the + button
-Select the Call an API element from the Channel category

### 2. Configure Request
- **Endpoint URL:** select predefined or enter custom URL  
- **Method:** GET / POST / PUT / DELETE  
- **Headers:**  
  - Default: `Content-Type: application/json`  
  - Add `Authorization`, other dynamic headers  
- **Path:** use dynamic content (auto-encoded for special chars)  

### 3. Set Body (JSON payload)
- Max size: **100 KB**  
- Use **Add Dynamic Content** to insert user/event data  
- Support for **fallback values**

```json```
{
  "user_id": "{{d_uuid}}",
  "email": "{{em}}",
  "event": "AbandonedCart"
}

### 4. Enable Response Management (Optional)
- **Toggle** `Store API Response`
- **Define Variables:**
  - `user_city`: `{{response.data.city}}` (string)
  - `order_value`: `{{response.order.total}}` (number)

### 5. Enable Retry & Throttling (Optional)
- **Retry:** enable with max attempts (e.g., `3`)
- **Throttling:** set limit (e.g., `100 req/sec`) & enable bypass option

### 6. Preview & Test
- **Click** `Test API`
- **Verify status codes:**
  - `2XX` = Success  
  - `4XX/5XX` = Error  
- Use placeholder or real dynamic content

### 7. Save as Template (Optional)

You can save your Call an API settings — including Method, Headers, and Body — as a template.
After saving, you can access your templates using the **Select Template** button. When clicked, a modal opens where you can:

- View and select previously saved templates  
- Re-use templates in your journeys  
- Edit or delete templates from the template store  

This feature helps you quickly apply commonly used API configurations without re-entering details each time.

#### Template Layout Details

##### Header Area (Title + Chips)
- **Title**: Displays the template name.
- **Chips (conditionally shown)**:
  - If API Response is enabled → show chip next to the title.
  - If Attribution Channel feature is enabled and selected → show chip next to the title.

##### Description Area
- Displays the Endpoint URL.
- No character limit: the container layout dynamically adjusts.
- If the endpoint has been deleted (via settings), the URL section will be empty in both the preview and the selected state.

##### Actions (Bottom of Template Card)
- **Select** button: select the template.
- **Delete** button: delete the saved templated.

##### Expand/Collapse Behavior
- Each template supports expand/collapse interaction.
- If the template does not have a Body, the Body section will be hidden when expanded (no placeholder).

##### Dynamic Content Display
- Instead, show dynamic content in brackets, similar to how it appears in URL previews.

### 8. Rename Channel Name (Optional)
- **Edit** the default name at top-right

### 9. Save the Configuration
> No autosave – **Click** `Save` manually  
> Validates JSON if `Content-Type: application/json`

### 10. Visibility on Canvas
- Element appears **filled** when valid  
- **Hover** to view summary  
- **Preview as User** by email/phone/ID

---

## Live Actions
Keep users in this step based on:
- **On Success**
- **On Failure**

> Default: user proceeds immediately.

---

## Tips and Best Practices
- Always include required headers (`Content-Type`, `Authorization`)  
- Use **fallback values** to avoid nulls in test mode  
- Test with both mock and real endpoints  
- Monitor CloudWatch & SQS logs for troubleshooting  

---

## Integration with Other Elements
1. **Update User Attribute**  
   - Map response variables to UCD attributes  
2. **Check API Response**  
   - Branch users using operators (`eq`, `ne`, `gt`, `lt`, `contains`, etc.)  
3. **Wait Element**  
   - Delay before checking async responses  

---

## Analytics
### Metrics per element
- **Arrived:** users who reached the step  
- **Processed:** requests sent  
- **Success:** `2XX` responses  
- **Failed:** `4XX`–`5XX` responses  
- **Throttled:** requests skipped due to limit  
- **Retried:** total retry attempts  
- **Dropped:** GDPR opt-outs  

---

## Final Testing Steps
1. **Create Journey** (“Start From Scratch”)  
2. **Add Starter** & **Call an API**  
3. **Configure** endpoint, headers, body  
4. Enable **retry**, **throttling**, **response management**  
5. Click **Test API** → confirm `2XX` / simulate `5XX`  
6. **Save** element  
7. **Launch** journey  
8. **Verify:**  
   - Network tab → `/make-request` call  
   - DynamoDB entries for responses  
   - CloudWatch & SQS processing logs  
   - Journey Analytics for metrics  

## Resources

- [Call an API – Confluence](https://insider-portal.atlassian.net/wiki/x/OAAxag)
- [Fetching Data through Call an API](https://insider-portal.atlassian.net/wiki/x/MQDB6Q)
- [Call an API Performance Metrics Reporting](https://insider-portal.atlassian.net/wiki/x/2IJc3w)

