---
description: 
globs:
  - call_api
  - api
  - webhook
alwaysApply: false
---
# Call an API Element Guide

## What is Call an API?
Call an API allows you to trigger HTTP requests to external systems (outsourced tools, vendors, CRM, backend services) when users arrive at the element in a journey.  
Use cases:
- Send real-time data to Salesforce, SMS/Email vendors, or custom backends  
- Trigger promotions or account updates based on user actions  
- Upsert or export data via UCD APIs (e.g., UCD Upsert, UCD Raw Data Export)  

>**Note:** This is **not** a bulk export tool. For large data exports, use the UCD Raw Data Export API.

## How Call an API Works
1. **Fetch user attributes** from Rosie (production only).  
2. **Send request** via API Gateway → SQS → Lambda.  
3. **Log** success/failure to Kinesis.  
4. **Optionally store** compressed response in DynamoDB (`call_an_api_responses`) if Response Management is enabled.  
5. **Proceed** user to next element regardless of outcome.  

### Call an API Templates

### Retry & Throttling
- **Throttling:** limit requests/sec per endpoint (5–5000, multiples of 5)  
- **Throttle retries:** up to 10 attempts at random 3–7 min intervals  
- **Timeout retries:** for 503/504 errors, up to 3 attempts at 3–7 min intervals  

### Response Management
- Toggle **Store API Response** to save compressed result  
- Define Variables (name, path, type) for downstream use  

---

## Call an API Structure

### 1. Create a Journey
- Go to **Architect**  
- Click **Start From Scratch**  
- Add any **Starter**  
- **Save** the starter  

### 2. Add Call an API Element
- Click the `+` icon  
- Choose **Channels > Call an API**  
- Click the added **Call an API** element  

### 3. Configure Request
- **Endpoint URL:** select predefined or enter custom URL  
- **Method:** GET / POST / PUT / DELETE  
- **Headers:**  
  - Default: `Content-Type: application/json`  
  - Add `Authorization`, other dynamic headers  
- **Path:** use dynamic content (auto-encoded for special chars)  

### 4. Set Body (JSON payload)
- Max size: **100 KB**  
- Use **Add Dynamic Content** to insert user/event data  
- Support for **fallback values**

```json
{
  "user_id": "{{d_uuid}}",
  "email": "{{em}}",
  "event": "AbandonedCart"
}

### 5. Enable Response Management (Optional)
- **Toggle** `Store API Response`
- **Define Variables:**
  - `user_city`: `{{response.data.city}}` (string)
  - `order_value`: `{{response.order.total}}` (number)

### 6. Enable Retry & Throttling (Optional)
- **Retry:** enable with max attempts (e.g., `3`)
- **Throttling:** set limit (e.g., `100 req/sec`) & enable bypass option

### 7. Preview & Test
- **Click** `Test API`
- **Verify status codes:**
  - `2XX` = Success  
  - `4XX/5XX` = Error  
- Use placeholder or real dynamic content

### 8. Save as Template (Optional)
- **Click** `Save Template`
- **Reuse** from `Select Template` dropdown

### 9. Rename Channel Name (Optional)
- **Edit** the default name at top-right

### 10. Save the Configuration
> No autosave – **Click** `Save` manually  
> Validates JSON if `Content-Type: application/json`

### 11. Visibility on Canvas
- Element appears **filled** when valid  
- **Hover** to view summary  
- **Preview as User** by email/phone/ID

---

## Live Actions
Keep users in this step based on:
- **On Success**
- **On Failure**

> Default: user proceeds immediately.

---

## Tips and Best Practices
- Always include required headers (`Content-Type`, `Authorization`)  
- Use **fallback values** to avoid nulls in test mode  
- Test with both mock and real endpoints  
- Monitor CloudWatch & SQS logs for troubleshooting  

---

## Integration with Other Elements
1. **Update User Attribute**  
   - Map response variables to UCD attributes  
2. **Check API Response**  
   - Branch users using operators (`eq`, `ne`, `gt`, `lt`, `contains`, etc.)  
3. **Wait Element**  
   - Delay before checking async responses  

---

## Analytics
### Metrics per element
- **Arrived:** users who reached the step  
- **Processed:** requests sent  
- **Success:** `2XX` responses  
- **Failed:** `4XX`–`5XX` responses  
- **Throttled:** requests skipped due to limit  
- **Retried:** total retry attempts  
- **Dropped:** GDPR opt-outs  

---

## Final Testing Steps
1. **Create Journey** (“Start From Scratch”)  
2. **Add Starter** & **Call an API**  
3. **Configure** endpoint, headers, body  
4. Enable **retry**, **throttling**, **response management**  
5. Click **Test API** → confirm `2XX` / simulate `5XX`  
6. **Save** element  
7. **Launch** journey  
8. **Verify:**  
   - Network tab → `/make-request` call  
   - DynamoDB entries for responses  
   - CloudWatch & SQS processing logs  
   - Journey Analytics for metrics  
