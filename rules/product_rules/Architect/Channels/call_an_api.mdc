---
description:
globs:
alwaysApply: false

---

# Call an API Element Guide

## What is Call an API?

Call an API allows you to trigger HTTP requests to external systems (outsourced tools, vendors, CRM, backend services) when users arrive at the element in a journey.  
Use cases:
- Send real-time data to Salesforce, SMS/Email vendors, or custom backends  
- Trigger promotions or account updates based on user actions  
- Upsert or export data via UCD APIs (e.g., UCD Upsert, UCD Raw Data Export)  
> **Note:** This is **not** a bulk export tool. For large data exports, use the UCD Raw Data Export API.
## How Call an API Works
1. **Fetch user attributes** from Rosie (production only).  
2. **Send request** via API Gateway → SQS → Lambda.  
3. **Log** success/failure to Kinesis.  
4. **Optionally store** compressed response in DynamoDB (`call_an_api_responses`) if Response Management is enabled.  
5. **Proceed** user to next element regardless of outcome.  
### Retry & Throttling
- **Throttling:** limit requests/sec per endpoint (5–5000, multiples of 5)  
- **Throttle retries:** up to 10 attempts at random 3–7 min intervals  
- **Timeout retries:** for 503/504 errors, up to 3 attempts at 3–7 min intervals  
### Response Management
- Toggle **Store API Response** to save compressed result  
- Define Variables (name, path, type) for downstream use  
###Attribution Channel
To view performance metrics, enable the **Attribution Channel** for the Call an API element.
- In the element settings, toggle **Attribution Channel** and select a channel (e.g., **Email**, **SMS**, **WhatsApp**, **App Push**, **Web Push**, **Other**).  
- Click **Save**.  
- After launching the journey, open Analytics for this element to see:
  - **Channel-specific metrics**  
  - **Conversions** and **Revenue** (Last-Click attribution)
---
## Call an API Structure

### Step 1: Add Call an API Element
- In the Canvas, click the `+` button
- Select the **Call an API** element from the Channel category

### 3. Configure Request
- **Endpoint URL:** select predefined or enter custom URL  
- **Method:** GET / POST / PUT / DELETE  
- **Headers:**  
  - Default: `Content-Type: application/json`  
  - Add `Authorization`, other dynamic headers  
- **Path:** use dynamic content (auto-encoded for special chars)  
### 4. Set Body (JSON payload)
- Max size: **100 KB**  
- Use **Add Dynamic Content** to insert user/event data  (based on recent Default/Custom Attributes, Event Parameter, Recommendation, Product Catalog Attribute(if added product starter on canvas), Call an api Response(if added call an api element and response value before then selected element))
- Support for **fallback values**  
- **JSON values can be arrays**
```json
{
  "user_id": "{d_uuid}",
  "email": "{em}",
  "event": "{cart_page_view.na}"
}
### 5. Response Variables Configuration & Usage
- **Toggle** “Enable Call an API Response” under the payload area.  
- **Fill in** each variable:
  - **Variable Name**: your reference for the fetched value  
  - **Response Snippet**: JSON path to the value (see Response Format below)  
  - **Data Type**: `string` | `number` | `date`  
- **Add another** response if needed (up to 150 variables).  
- **Save** the element.

### 6. Enable Retry & Throttling (Optional)
By default, Call an API sends all requests immediately, which can overwhelm endpoints when many users arrive at once. Use **throttling** under **Architect > API Preferences**.
**Define Throttling per Endpoint**  
   - Go to **Architect > API Preferences** and click **Add API Endpoint**  
   - Enter the **URL** and **Request Size Limit** (multiple of 5, between 5 and 5000)  
   - Click **Save**
 **Apply in Your Call an API Element**  
   - In the element’s settings, enter the throttled URL  
   - The configured limit appears automatically  
   - Optionally toggle **Bypass Throttling** to disable it for this element
**Shared Quota**  
   - Throttling is **endpoint-based**, not per element  
   - E.g., a 500 req/sec limit on one endpoint applies across all Call an API elements using that URL
 **Throttle Retries**  
   - Throttled requests retry up to **10 times** at random 3–7 min intervals  
   - If all retries are throttled, the user proceeds to the next element and **“Proceeded (Throttled)”** increments in analytics

### 7. Preview & Test
- **Click** `Test API`
- **Verify status codes:**
  - `2XX` = Success  
  - `4XX/5XX` = Error  
- Use placeholder or real dynamic content
### 8. Save as Template (Optional)
- **Click** `Save Template`
- **Reuse** from `Select Template` dropdown
### 9. Rename Channel Name (Optional)
- **Edit** the default name at top-right
### 10. Save the Configuration
> No autosave – **Click** `Save` manually  
> Validates JSON if `Content-Type: application/json`
### 11. Visibility on Canvas
- Element appears **filled** when valid  
- **Hover** to view summary  
---
## Live Actions

- Options:
  - `On Send` (default)
---
Keep users in this step based on:
- **On Success**
- **On Failure**
> Default: user proceeds immediately.
---
## Tips and Best Practices
- Always include required headers (`Content-Type`, `Authorization`)  
- Use **fallback values** to avoid nulls in test mode  
- Test with both mock and real endpoints  
- Monitor CloudWatch & SQS logs for troubleshooting  
---
## Integration with Other Elements
1. **Update User Attribute**  
    - Map response variables to UCD attributes  
2. **Check API Response**  
    - Branch users using operators (`eq`, `ne`, `gt`, `lt`, `contains`, etc.)  
3. **Wait Element**  
    - Delay before checking async responses  
4. **Next Best Channel**
   - In Gachapon, enable the **Call an API for Next Best Channel** toggle under the Architect tab.  
   - Add a **Call an API** element under the **Next Best Channel** element.  
   - Inside the Call an API element, check **Attribution Channel** and select the channel type—if omitted, you’ll get a validation error at launch.  
   - This setting makes the Call an API element behave exactly like the selected channel (e.g., selecting **Email** routes requests to your partner’s email service).  
---
## Analytics
### Metrics per element
- **Arrived:** users who reached the step  
- **Processed:** requests sent  
- **Success:** `2XX` responses  
- **Failed:** `4XX`–`5XX` responses  
- **Throttled:** requests skipped due to limit  
- **Retried:** total retry attempts  
- **Dropped:** GDPR opt-outs  
---
## Final Testing Steps
1. **Create Journey** (“Start From Scratch”)  
2. **Add Starter** & **Call an API**  
3. **Configure** endpoint, headers, body  
4. Enable **retry**, **throttling**, **response management**  
5. Click **Test API** → confirm `2XX` / simulate `5XX`  
6. **Save** element  
7. **Launch** journey  
8. **Verify:**  
   - Network tab → `/make-request` call  
   - DynamoDB entries for responses  
   - CloudWatch & SQS processing logs  
   - Journey Analytics for metrics 